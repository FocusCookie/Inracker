/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PlayIndexImport } from './routes/play/index'
import { Route as PartiesIndexImport } from './routes/parties/index'
import { Route as ChaptersIndexImport } from './routes/chapters/index'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const PlayIndexRoute = PlayIndexImport.update({
  id: '/play/',
  path: '/play/',
  getParentRoute: () => rootRoute,
} as any)

const PartiesIndexRoute = PartiesIndexImport.update({
  id: '/parties/',
  path: '/parties/',
  getParentRoute: () => rootRoute,
} as any)

const ChaptersIndexRoute = ChaptersIndexImport.update({
  id: '/chapters/',
  path: '/chapters/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/chapters/': {
      id: '/chapters/'
      path: '/chapters'
      fullPath: '/chapters'
      preLoaderRoute: typeof ChaptersIndexImport
      parentRoute: typeof rootRoute
    }
    '/parties/': {
      id: '/parties/'
      path: '/parties'
      fullPath: '/parties'
      preLoaderRoute: typeof PartiesIndexImport
      parentRoute: typeof rootRoute
    }
    '/play/': {
      id: '/play/'
      path: '/play'
      fullPath: '/play'
      preLoaderRoute: typeof PlayIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/chapters': typeof ChaptersIndexRoute
  '/parties': typeof PartiesIndexRoute
  '/play': typeof PlayIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/chapters': typeof ChaptersIndexRoute
  '/parties': typeof PartiesIndexRoute
  '/play': typeof PlayIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/chapters/': typeof ChaptersIndexRoute
  '/parties/': typeof PartiesIndexRoute
  '/play/': typeof PlayIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/chapters' | '/parties' | '/play'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/chapters' | '/parties' | '/play'
  id: '__root__' | '/' | '/chapters/' | '/parties/' | '/play/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ChaptersIndexRoute: typeof ChaptersIndexRoute
  PartiesIndexRoute: typeof PartiesIndexRoute
  PlayIndexRoute: typeof PlayIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ChaptersIndexRoute: ChaptersIndexRoute,
  PartiesIndexRoute: PartiesIndexRoute,
  PlayIndexRoute: PlayIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/chapters/",
        "/parties/",
        "/play/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/chapters/": {
      "filePath": "chapters/index.tsx"
    },
    "/parties/": {
      "filePath": "parties/index.tsx"
    },
    "/play/": {
      "filePath": "play/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
